name: Test with Ansible

"on":
  push:
    paths-ignore:
      - README.md
      - LICENSE
  pull_request:
  schedule:
    - cron: "12 0 * * *"
  release:
    types:
      - published  # It seems that you can publish directly without creating
      - prereleased
  workflow_dispatch:

env:
  ANSIBLE_COLLECTIONS_PATHS: ~/.ansible/:~/work/
  checkout_path: ansible_collections/{{ namespace }}/{{ collection_name }}

jobs:
  collect:
    runs-on: ubuntu-latest
    outputs:
      scenarios: "{% raw %}${{ steps.collection.outputs.tox-envs }}{% endraw %}"
      vagrant_scenarios: "{% raw %}${{ steps.vagrant.outputs.tox-envs }}{% endraw %}"
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Set up Python
        uses: actions/setup-python@v2
      - name: Install dependencies
        run: |
          set -ex
          python -m pip install --upgrade tox
      - id: collection
        uses: greg-hellings/tox-list@v1
        with:
          tox-args: --ansible-driver docker --ansible-driver podman --ansible-driver containers
      - id: vagrant
        uses: greg-hellings/tox-list@v1
        with:
          tox-args: --ansible-driver vagrant

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          path: "{% raw %}${{ env.checkout_path }}{% endraw %}"
      - name: Update submodules to latest
        run: |
          cd "{% raw %}${{ env.checkout_path }}{% endraw %}"
          git submodule update --remote --recursive
      - name: Set up Python
        uses: actions/setup-python@v2
      - name: Install dependencies
        run: |
          set -ex
          python -m pip install --upgrade tox
      - name: Run lint
        run: |
          cd "{% raw %}${{ env.checkout_path }}{% endraw %}"
          tox -e lint_all

  vagrant_build:
    needs:
      - collect
      - lint
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        scenario: "{% raw %}${{ fromJson(needs.collect.outputs.vagrant_scenarios) }}{% endraw %}"
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          path: "{% raw %}${{ env.checkout_path }}{% endraw %}"
      - name: Update submodules to latest
        run: |
          cd "{% raw %}${{ env.checkout_path }}{% endraw %}"
          git submodule update --remote --recursive
      - name: Set up Python
        uses: actions/setup-python@v2
      - name: Install dependencies
        run: |
          python -m pip install -U tox
      - name: "Run tox against {% raw %}${{ matrix.scenario }}{% endraw %}"
        run: |
          set -ex
          mv ansible_collections ~/work/
          cd ~/work/"{% raw %}${{ env.checkout_path }}{% endraw %}"
          tox -e "{% raw %}${{ matrix.scenario }}{% endraw %}"

  build:
    needs:
      - collect
      - lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        scenario: "{% raw %}${{ fromJson(needs.collect.outputs.scenarios) }}{% endraw %}"
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          path: "{% raw %}${{ env.checkout_path }}{% endraw %}"
      - name: update submodules
        run: |
          cd "{% raw %}${{ env.checkout_path }}{% endraw %}"
          git submodule update --remote --recursive
      - name: Set up Python
        uses: actions/setup-python@v2
      - name: Install dependencies
        run: |
          set -ex
          python -m pip install --upgrade tox
      - name: Run tox against "{% raw %}${{ matrix.scenario }}{% endraw %}"
        run: |
          set -ex
          # There is some magic in the "mv" command that makes ansible-galaxy work
          # I haven't found any logic for it, but if you don't do this mv, then
          # the dependency step in molecule when run from tox will fail
          mv ansible_collections ~/work/
          {% raw %}cd ~/work/"${{ env.checkout_path }}{% endraw %}"
          tox -e "{% raw %}${{ matrix.scenario }}{% endraw %}"

  release:
    needs:
      - build  # Only release if the build is good
      - vagrant_build
    if: github.event_type == "release"
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - uses: artis3n/ansible_galaxy_collection@v2.6.2
        with:
          api_key: "{% raw %}${{ secrets.GALAXY_API_KEY }}{% endraw %}"
